# Name: Lydia Myla
# Date: 11/12/24
# Title: Lab 8 - Description
# Description: implementations and results

FIFO Description:
	The FIFO Page Replacement Algorithm takes an argument from the command line to determine the cache size, 
    initializes an array to represent the cache, and then continuously reads input from stdin. 
    Upon encountering a page not already in the cache, it increments a counter for total page faults, 
    inserts the page into the cache using FIFO policy, and updates the position for future insertions. 
    Finally, it prints the total number of page faults incurred during the simulation.
LRU Description
	This program implements a cache just like FIFO but using the Least Recently Used (LRU) Page Replacement Algorithm. 
    It initializes an array of structures to represent the cache, with each structure containing a page number 
    and a counter to track the time when the page was last accessed. 
    When encountering a page not already in the cache, it identifies the least recently used page using the counter values, 
    replaces it with the new page, and updates its counter. 
    The program then continues to simulate page accesses until there is no more input, 
    counting and printing the total number of page faults incurred during the simulation.
Second Chance Description
	This program simply implements the second cache page replacement algorithm where we also use a cache. 
    It initializes an array of structures to represent the cache, 
    with each structure containing a page number and a boolean flag indicating whether the page has been referenced. 
    When encountering a page not already in the cache, 
    it selects the first page without a reference bit set (if any) using a circular scanning approach, 
    replaces it with the new page, and updates the reference bit. 
    The program continues simulating page accesses until there is no more input, 
    counting and printing the total number of page faults incurred during the simulation.

Results of the Test
gcc -o lru lru.c
gcc -o fifo fifo.c
gcc -o sec_chance sec_chance.c
---------- FIFO ----------
7
49
23
8
30
22
44
28
9
---------- End FIFO ----------

---------- LRU ----------
7
49
23
8
30
22
44
28
9
---------- End LRU ----------

---------- Second Chance ----------
7
49
23
8
30
22
44
28
9
---------- End Second Chance ----------

FIFO 10K Test with cache sizes = 10, 50, 100, 250, 500
Cache size = 10, miss-rate =     9916 / 10000 = .9916
Cache size = 50, miss-rate =     9515 / 10000 = .9515
Cache size = 100, miss-rate =     9018 / 10000 = .9018
Cache size = 250, miss-rate =     7534 / 10000 = .7534
Cache size = 500, miss-rate =     5130 / 10000 = .5130

LRU 10K Test with cache sizes = 10, 50, 100, 250, 500
Cache size = 10, miss-rate =     9915 / 10000 = .9915
Cache size = 50, miss-rate =     9510 / 10000 = .9510
Cache size = 100, miss-rate =     9029 / 10000 = .9029
Cache size = 250, miss-rate =     7532 / 10000 = .7532
Cache size = 500, miss-rate =     5207 / 10000 = .5207

Second Chance 10K Test with cache sizes = 10, 50, 100, 250, 500
Cache size = 10, miss-rate =     9915 / 10000 = .9915
Cache size = 50, miss-rate =     9510 / 10000 = .9510
Cache size = 100, miss-rate =     9022 / 10000 = .9022
Cache size = 250, miss-rate =     7526 / 10000 = .7526
Cache size = 500, miss-rate =     5178 / 10000 = .5178

rm -f *.out lru fifo sec_chance


CODE FOR SHELL FILE
# Name: Lydia Myla
# Date: 11/12/24
# Title: Lab 8 - Step 6 Part 1
# Description: Bash script to test page replacement algorithms with detailed output

#!/bin/bash
# Compile the C programs
make;

TOTAL_REQUESTS=10000

echo "---------- FIFO ----------"
cat testInput.txt | ./fifo 10
echo "---------- End FIFO ----------"
echo

echo "---------- LRU ----------"
cat testInput.txt | ./lru 10
echo "---------- End LRU ----------"
echo

echo "---------- Second Chance ----------"
cat testInput.txt | ./sec_chance 10
echo "---------- End Second Chance ----------"
echo

# Run detailed tests on accesses.txt with multiple cache sizes
echo "FIFO 10K Test with cache sizes = 10, 50, 100, 250, 500"
for size in 10 50 100 250 500; do
    faults=$(cat accesses.txt | ./fifo "$size" | wc -l)
    miss_rate=$(echo "scale=4; $faults / $TOTAL_REQUESTS" | bc)
    echo "Cache size = $size, miss-rate = $faults / $TOTAL_REQUESTS = $miss_rate"
done
echo

echo "LRU 10K Test with cache sizes = 10, 50, 100, 250, 500"
for size in 10 50 100 250 500; do
    faults=$(cat accesses.txt | ./lru "$size" | wc -l)
    miss_rate=$(echo "scale=4; $faults / $TOTAL_REQUESTS" | bc)
    echo "Cache size = $size, miss-rate = $faults / $TOTAL_REQUESTS = $miss_rate"
done
echo

echo "Second Chance 10K Test with cache sizes = 10, 50, 100, 250, 500"
for size in 10 50 100 250 500; do
    faults=$(cat accesses.txt | ./sec_chance "$size" | wc -l)
    miss_rate=$(echo "scale=4; $faults / $TOTAL_REQUESTS" | bc)
    echo "Cache size = $size, miss-rate = $faults / $TOTAL_REQUESTS = $miss_rate"
done
echo

# Clean up compiled files
make clean;
echo

CODE FOR GRAPH AND TABLE
# Name: Lydia Myla
# Date: 11/12/24
# Title: Lab 8 - Results
# Description: results of the algorithms hit rates

import matplotlib.pyplot as plt
import numpy as np

cache_sizes = [10, 50, 100, 250, 500]

fifo_faults = [9916, 9515, 9018, 7534, 5130]
lru_faults = [9915, 9510, 9029, 7532, 5207]
second_chance_faults = [9915, 9510, 9022, 7526, 5178]

# Calculating hit rates
fifo_hit_rates = [(10000 - faults) / 10000 for faults in fifo_faults]
lru_hit_rates = [(10000 - faults) / 10000 for faults in lru_faults]
second_chance_hit_rates = [(10000 - faults) / 10000 for faults in second_chance_faults]

# Create bar graph
bar_width = 0.25
index = np.arange(len(cache_sizes))

plt.figure(figsize=(12, 10))

# Bar graph
plt.subplot(2, 1, 1)
plt.bar(index, fifo_hit_rates, bar_width, label='FIFO')
plt.bar(index + bar_width, lru_hit_rates, bar_width, label='LRU')
plt.bar(index + 2 * bar_width, second_chance_hit_rates, bar_width, label='Second Chance')

plt.xlabel('Cache Size')
plt.ylabel('Hit Rate')
plt.title('Hit Rates of Page Replacement Algorithms')
plt.xticks(index + bar_width, cache_sizes)
plt.legend()

plt.grid(axis='y', linestyle='--', alpha=0.7)

# Table
plt.subplot(2, 1, 2) 
plt.axis('off')

data = [cache_sizes, fifo_hit_rates, lru_hit_rates, second_chance_hit_rates]
columns = ['Cache Size', 'FIFO Hit Rate', 'LRU Hit Rate', 'Second Chance Hit Rate']  # Column labels

# Create the table
table = plt.table(cellText=np.array(data).T, colLabels=columns, loc='center', cellLoc='center', colColours=['lightgray']*4)
table.auto_set_font_size(False)
table.set_fontsize(12)
table.scale(1.5, 1.5) 

plt.tight_layout()
plt.savefig('Graph_and_Tables.png')
plt.show()